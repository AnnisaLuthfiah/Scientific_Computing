# -*- coding: utf-8 -*-
"""2702350075-AnnisaLuthfiahRahmah-DIFFERENCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_kuyeWt5XZzK-DWJ0Z8MwPWLk9kufji
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-poster')
# %matplotlib inline

# step size
h = 0.1
# define grid
x = np.arange(0, 2*np.pi, h)
# compute function
y = np.cos(x)

# compute vector of forward difference
forward_diff = np.diff(y)/h
# compute corresponding grid
x_diff = x[:-1:]
# compute exact solution
exact_solution = -np.sin(x_diff)

# Plot solution
plt.figure(figsize = (12, 8))
plt.plot(x_diff, forward_diff, '--', \
         label = 'Finite difference approximation')
plt.plot(x_diff, exact_solution, \
         label = 'Exact solution')
plt.legend()
plt.show()

# Compute max error between
# numerical dertivative and exact solution
max_error = max(abs(exact_solution - forward_diff))
print(max_error)

"""QUIZ Difference

compute f'(x) at x = 0 and 0.2

Given the evenly spaced data points

x = 0 0,1 0,2 0,3 0,4
f(x) = 0.0000 0.0819 0.1341 0.1646 0.1797
"""

import numpy as np
import matplotlib.pyplot as plt

# Given data points
x_points = np.array([0, 0.1, 0.2, 0.3, 0.4])
f_points = np.array([0.0000, 0.0819, 0.1341, 0.1646, 0.1797])
h = 0.1

# Compute forward difference at x = 0
f_prime_0 = (f_points[1] - f_points[0]) / h

# Compute central difference at x = 0.2
f_prime_0_2 = (f_points[3] - f_points[1]) / (2 * h)

print(f"f'(0) = {f_prime_0}")
print(f"f'(0.2) = {f_prime_0_2}")

# Plotting the given data points
plt.figure(figsize=(12, 8))
plt.plot(x_points, f_points, 'bo-', label='f(x) data points')

# Annotate the derivative calculations on the plot
plt.plot(0, f_points[0], 'ro')  # Mark the point at x=0
plt.text(0, f_points[0], f"f'(0) = {f_prime_0:.4f}", fontsize=12, verticalalignment='bottom', horizontalalignment='right')

plt.plot(0.2, f_points[2], 'ro')  # Mark the point at x=0.2
plt.text(0.2, f_points[2], f"f'(0.2) = {f_prime_0_2:.4f}", fontsize=12, verticalalignment='bottom', horizontalalignment='left')

plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Function Values and Derivative Approximations')
plt.legend()
plt.grid(True)
plt.show()